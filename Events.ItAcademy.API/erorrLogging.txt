 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:05:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A2U4VPJK:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:05:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:05:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A2U4VPJL:00000005
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Price",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TicketCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Price",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TicketCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:05:47
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 12:06:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A2U4VPJM:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxMzIxMSwiZXhwIjoxNjc5MjE2ODExLCJpYXQiOjE2NzkyMTMyMTEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.kBQdjjz2pJqboDX-vgdfy4pK8cQE5bnidbBgxS__u30
ResponseTime = 19.03.2023 12:06:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:08:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A4DAMKFN:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:08:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:08:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A4DAMKFN:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Price",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TicketCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Price",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TicketCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:08:23
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 12:09:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A4DAMKFO:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxMzM2OSwiZXhwIjoxNjc5MjE2OTY5LCJpYXQiOjE2NzkyMTMzNjksImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Q4W0M3c91xtIispFpOiladbpTKL_2DEsjywteQkrajQ
ResponseTime = 19.03.2023 12:09:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:14:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A7M26H69:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:14:13
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:14:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A7M26H69:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Price",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TicketCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Title",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Price",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "TicketCount",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "StartDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:14:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:16:58
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT40:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:16:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:17:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT40:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:17:00.6325901+04:00","endDate":"2023-04-03T20:17:00.6327655+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:17:01.0506131+04:00","endDate":"2023-03-29T15:17:01.0506152+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:17:01.0514785+04:00","endDate":"2023-04-09T12:17:01.0514797+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:17:00.6325901+04:00","endDate":"2023-04-03T20:17:00.6327655+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:17:01.0506131+04:00","endDate":"2023-03-29T15:17:01.0506152+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:17:01.0514785+04:00","endDate":"2023-04-09T12:17:01.0514797+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:17:00.6325901+04:00","endDate":"2023-04-03T20:17:00.6327655+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:17:01.0506131+04:00","endDate":"2023-03-29T15:17:01.0506152+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:17:01.0514785+04:00","endDate":"2023-04-09T12:17:01.0514797+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:17:00.6325901+04:00","endDate":"2023-04-03T20:17:00.6327655+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:17:01.0506131+04:00","endDate":"2023-03-29T15:17:01.0506152+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:17:01.0514785+04:00","endDate":"2023-04-09T12:17:01.0514797+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:17:01.0582248+04:00","endDate":"2023-03-24T21:17:01.0583415+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:17:01.0650211+04:00","endDate":"2023-03-29T18:17:01.0650222+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:17:01.0582248+04:00","endDate":"2023-03-24T21:17:01.0583415+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:17:01.0650211+04:00","endDate":"2023-03-29T18:17:01.0650222+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:17:01.0582248+04:00","endDate":"2023-03-24T21:17:01.0583415+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:17:01.0650211+04:00","endDate":"2023-03-29T18:17:01.0650222+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:17:01.0582248+04:00","endDate":"2023-03-24T21:17:01.0583415+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:17:01.0650211+04:00","endDate":"2023-03-29T18:17:01.0650222+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:17:01
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Metallica concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-03T12:17:00.6325901+04:00",
  "endDate": "2023-04-03T20:17:00.6327655+04:00"
}
Time = 19.03.2023 12:24:30
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMP8A97HDT41:00000001
Body = 
ResponseTime = 19.03.2023 12:24:30
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 12:24:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT41:00000003
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxNDI4NywiZXhwIjoxNjc5MjE3ODg3LCJpYXQiOjE2NzkyMTQyODcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.To7XZThOp61OT9b_euryRaHfgZTu5GJ-sZjISXL-7Js
ResponseTime = 19.03.2023 12:24:47
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Metallica concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-03T12:17:00.6325901+04:00",
  "endDate": "2023-04-03T20:17:00.6327655+04:00"
}
Time = 19.03.2023 12:25:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT41:00000005
Body = 
ResponseTime = 19.03.2023 12:25:46
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Gore verbinski in Tbilisi",
  "description": "Famous movie director is in georgia to spread his knowledge about filmmaking",
  "price": 50,
  "ticketCount": 200,
  "startDate": "2023-03-29T12:17:01.0506131+04:00",
  "endDate": "2023-03-29T15:17:01.0506152+04:00"
}
Time = 19.03.2023 12:25:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT41:00000007
Body = 
ResponseTime = 19.03.2023 12:25:50
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Fashion week",
  "description": "Famous models came into georgia to participate in fashion week",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-08T12:17:01.0514785+04:00",
  "endDate": "2023-04-09T12:17:01.0514797+04:00"
}
Time = 19.03.2023 12:25:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT41:00000009
Body = 
ResponseTime = 19.03.2023 12:25:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /v1/Events
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:26:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8A97HDT41:0000000B
Body = []
ResponseTime = 19.03.2023 12:26:27
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 12:40:51
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 12:41:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:44:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8AOLCCK05:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:44:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:44:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8AOLCCK05:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:44:39.0269315+04:00","endDate":"2023-04-03T20:44:39.0271134+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:44:39.552016+04:00","endDate":"2023-03-29T15:44:39.5520179+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:44:39.552916+04:00","endDate":"2023-04-09T12:44:39.5529171+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:44:39.0269315+04:00","endDate":"2023-04-03T20:44:39.0271134+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:44:39.552016+04:00","endDate":"2023-03-29T15:44:39.5520179+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:44:39.552916+04:00","endDate":"2023-04-09T12:44:39.5529171+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:44:39.0269315+04:00","endDate":"2023-04-03T20:44:39.0271134+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:44:39.552016+04:00","endDate":"2023-03-29T15:44:39.5520179+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:44:39.552916+04:00","endDate":"2023-04-09T12:44:39.5529171+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:44:39.0269315+04:00","endDate":"2023-04-03T20:44:39.0271134+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:44:39.552016+04:00","endDate":"2023-03-29T15:44:39.5520179+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:44:39.552916+04:00","endDate":"2023-04-09T12:44:39.5529171+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:44:39.5604946+04:00","endDate":"2023-03-24T21:44:39.5605976+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:44:39.5658303+04:00","endDate":"2023-03-29T18:44:39.5658313+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:44:39.5604946+04:00","endDate":"2023-03-24T21:44:39.5605976+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:44:39.5658303+04:00","endDate":"2023-03-29T18:44:39.5658313+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:44:39.5604946+04:00","endDate":"2023-03-24T21:44:39.5605976+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:44:39.5658303+04:00","endDate":"2023-03-29T18:44:39.5658313+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:44:39.5604946+04:00","endDate":"2023-03-24T21:44:39.5605976+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:44:39.5658303+04:00","endDate":"2023-03-29T18:44:39.5658313+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:44:40
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 12:45:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8AOLCCK06:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxNTUxOCwiZXhwIjoxNjc5MjE5MTE4LCJpYXQiOjE2NzkyMTU1MTgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.389Cb9ZiVm8cMN_cFRO_Geozgef__oI9TP_zaOe6Jvc
ResponseTime = 19.03.2023 12:45:19
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 12:46:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:47:58
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8AQHNFOFS:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:47:59
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:48:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8AQHNFOFS:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:48:01.0147874+04:00","endDate":"2023-04-03T20:48:01.0149363+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:48:01.4512634+04:00","endDate":"2023-03-29T15:48:01.4512657+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:48:01.4520083+04:00","endDate":"2023-04-09T12:48:01.4520092+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:48:01.0147874+04:00","endDate":"2023-04-03T20:48:01.0149363+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:48:01.4512634+04:00","endDate":"2023-03-29T15:48:01.4512657+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:48:01.4520083+04:00","endDate":"2023-04-09T12:48:01.4520092+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:48:01.0147874+04:00","endDate":"2023-04-03T20:48:01.0149363+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:48:01.4512634+04:00","endDate":"2023-03-29T15:48:01.4512657+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:48:01.4520083+04:00","endDate":"2023-04-09T12:48:01.4520092+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:48:01.0147874+04:00","endDate":"2023-04-03T20:48:01.0149363+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:48:01.4512634+04:00","endDate":"2023-03-29T15:48:01.4512657+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:48:01.4520083+04:00","endDate":"2023-04-09T12:48:01.4520092+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:48:01.4741651+04:00","endDate":"2023-03-24T21:48:01.4742588+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:48:01.4788654+04:00","endDate":"2023-03-29T18:48:01.4788665+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:48:01.4741651+04:00","endDate":"2023-03-24T21:48:01.4742588+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:48:01.4788654+04:00","endDate":"2023-03-29T18:48:01.4788665+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:48:01.4741651+04:00","endDate":"2023-03-24T21:48:01.4742588+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:48:01.4788654+04:00","endDate":"2023-03-29T18:48:01.4788665+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:48:01.4741651+04:00","endDate":"2023-03-24T21:48:01.4742588+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:48:01.4788654+04:00","endDate":"2023-03-29T18:48:01.4788665+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:48:01
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 12:48:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8AQHNFOFT:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxNTcyOSwiZXhwIjoxNjc5MjE5MzI5LCJpYXQiOjE2NzkyMTU3MjksImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.YHTmVWCZ5agqtmVCJVtBEcHZESWFvM32ocKxuQaHbvw
ResponseTime = 19.03.2023 12:48:49
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 12:49:06
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 12:50:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:52:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8ASRPF8F1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 12:52:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 12:52:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8ASRPF8F1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:52:10.7943114+04:00","endDate":"2023-04-03T20:52:10.7944392+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:52:11.2096789+04:00","endDate":"2023-03-29T15:52:11.2096809+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:52:11.210363+04:00","endDate":"2023-04-09T12:52:11.2103641+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:52:10.7943114+04:00","endDate":"2023-04-03T20:52:10.7944392+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:52:11.2096789+04:00","endDate":"2023-03-29T15:52:11.2096809+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:52:11.210363+04:00","endDate":"2023-04-09T12:52:11.2103641+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:52:10.7943114+04:00","endDate":"2023-04-03T20:52:10.7944392+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:52:11.2096789+04:00","endDate":"2023-03-29T15:52:11.2096809+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:52:11.210363+04:00","endDate":"2023-04-09T12:52:11.2103641+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T12:52:10.7943114+04:00","endDate":"2023-04-03T20:52:10.7944392+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T12:52:11.2096789+04:00","endDate":"2023-03-29T15:52:11.2096809+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T12:52:11.210363+04:00","endDate":"2023-04-09T12:52:11.2103641+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:52:11.2165976+04:00","endDate":"2023-03-24T21:52:11.2166731+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:52:11.2218058+04:00","endDate":"2023-03-29T18:52:11.221807+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:52:11.2165976+04:00","endDate":"2023-03-24T21:52:11.2166731+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:52:11.2218058+04:00","endDate":"2023-03-29T18:52:11.221807+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:52:11.2165976+04:00","endDate":"2023-03-24T21:52:11.2166731+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:52:11.2218058+04:00","endDate":"2023-03-29T18:52:11.221807+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T12:52:11.2165976+04:00","endDate":"2023-03-24T21:52:11.2166731+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T12:52:11.2218058+04:00","endDate":"2023-03-29T18:52:11.221807+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 12:52:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 12:52:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8ASRPF8F2:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxNTk3MCwiZXhwIjoxNjc5MjE5NTcwLCJpYXQiOjE2NzkyMTU5NzAsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Fbenz5d2Gi7SMhEQUTvD4Kuo9NClMr_bNTw0vsq7Qk0
ResponseTime = 19.03.2023 12:52:51
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 12:53:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8ASRPF8F3:00000001
Body = 
ResponseTime = 19.03.2023 12:58:30
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 13:01:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:03:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6K5:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 13:03:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:03:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6K5:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:03:29.8497108+04:00","endDate":"2023-04-03T21:03:29.8500188+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:03:30.4140741+04:00","endDate":"2023-03-29T16:03:30.4140763+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:03:30.4148605+04:00","endDate":"2023-04-09T13:03:30.4148614+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:03:29.8497108+04:00","endDate":"2023-04-03T21:03:29.8500188+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:03:30.4140741+04:00","endDate":"2023-03-29T16:03:30.4140763+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:03:30.4148605+04:00","endDate":"2023-04-09T13:03:30.4148614+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:03:29.8497108+04:00","endDate":"2023-04-03T21:03:29.8500188+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:03:30.4140741+04:00","endDate":"2023-03-29T16:03:30.4140763+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:03:30.4148605+04:00","endDate":"2023-04-09T13:03:30.4148614+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:03:29.8497108+04:00","endDate":"2023-04-03T21:03:29.8500188+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:03:30.4140741+04:00","endDate":"2023-03-29T16:03:30.4140763+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:03:30.4148605+04:00","endDate":"2023-04-09T13:03:30.4148614+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:03:30.4222924+04:00","endDate":"2023-03-24T22:03:30.4224077+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:03:30.4479943+04:00","endDate":"2023-03-29T19:03:30.4479959+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:03:30.4222924+04:00","endDate":"2023-03-24T22:03:30.4224077+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:03:30.4479943+04:00","endDate":"2023-03-29T19:03:30.4479959+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:03:30.4222924+04:00","endDate":"2023-03-24T22:03:30.4224077+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:03:30.4479943+04:00","endDate":"2023-03-29T19:03:30.4479959+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:03:30.4222924+04:00","endDate":"2023-03-24T22:03:30.4224077+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:03:30.4479943+04:00","endDate":"2023-03-29T19:03:30.4479959+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 13:03:30
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 13:03:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6K6:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTIxNjYyNSwiZXhwIjoxNjc5MjIwMjI1LCJpYXQiOjE2NzkyMTY2MjUsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.MHrqLOZvqmx0PORM_9ln4tN0ic3pjwKn7VOjPhY-YOM
ResponseTime = 19.03.2023 13:03:45
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=2
RequestBody = 
Time = 19.03.2023 13:04:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6K7:00000001
Body = 
ResponseTime = 19.03.2023 13:05:08
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=2
RequestBody = 
Time = 19.03.2023 13:05:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6K8:00000001
Body = 
ResponseTime = 19.03.2023 13:05:45
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=3
RequestBody = 
Time = 19.03.2023 13:10:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6K9:00000001
Body = 
ResponseTime = 19.03.2023 13:12:17
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=3
RequestBody = 
Time = 19.03.2023 13:12:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6KA:00000001
Body = 
ResponseTime = 19.03.2023 13:12:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 13:13:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8B36EK6KB:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsIm5iZiI6MTY3OTIxNzIwMCwiZXhwIjoxNjc5MjIwODAwLCJpYXQiOjE2NzkyMTcyMDAsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.9_IcP-ffydome5zPfKkjBfYxSbbc7L47Z1vLKWdoag0
ResponseTime = 19.03.2023 13:13:20
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 13:13:37
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 13:14:20
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:17:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BAR387SR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 13:17:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:17:10
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 13:17:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BAR387SR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:17:11.2267023+04:00","endDate":"2023-04-03T21:17:11.2268632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:17:11.7464721+04:00","endDate":"2023-03-29T16:17:11.7464741+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:17:11.7472062+04:00","endDate":"2023-04-09T13:17:11.7472071+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:17:11.2267023+04:00","endDate":"2023-04-03T21:17:11.2268632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:17:11.7464721+04:00","endDate":"2023-03-29T16:17:11.7464741+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:17:11.7472062+04:00","endDate":"2023-04-09T13:17:11.7472071+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:17:11.2267023+04:00","endDate":"2023-04-03T21:17:11.2268632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:17:11.7464721+04:00","endDate":"2023-03-29T16:17:11.7464741+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:17:11.7472062+04:00","endDate":"2023-04-09T13:17:11.7472071+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:17:11.2267023+04:00","endDate":"2023-04-03T21:17:11.2268632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:17:11.7464721+04:00","endDate":"2023-03-29T16:17:11.7464741+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:17:11.7472062+04:00","endDate":"2023-04-09T13:17:11.7472071+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:17:11.7556279+04:00","endDate":"2023-03-24T22:17:11.7557301+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:17:11.7612846+04:00","endDate":"2023-03-29T19:17:11.7612858+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:17:11.7556279+04:00","endDate":"2023-03-24T22:17:11.7557301+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:17:11.7612846+04:00","endDate":"2023-03-29T19:17:11.7612858+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:17:11.7556279+04:00","endDate":"2023-03-24T22:17:11.7557301+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:17:11.7612846+04:00","endDate":"2023-03-29T19:17:11.7612858+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:17:11.7556279+04:00","endDate":"2023-03-24T22:17:11.7557301+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:17:11.7612846+04:00","endDate":"2023-03-29T19:17:11.7612858+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 13:17:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BAR387SR:00000009
Body = 
ResponseTime = 19.03.2023 13:17:19
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 19.03.2023 13:17:29
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:20:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BCGC1ANK:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 19.03.2023 13:20:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:20:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BCGC1ANK:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:20:10.9056199+04:00","endDate":"2023-04-03T21:20:10.9057285+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:20:11.2885327+04:00","endDate":"2023-03-29T16:20:11.2885347+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:20:11.2893005+04:00","endDate":"2023-04-09T13:20:11.2893014+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:20:10.9056199+04:00","endDate":"2023-04-03T21:20:10.9057285+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:20:11.2885327+04:00","endDate":"2023-03-29T16:20:11.2885347+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:20:11.2893005+04:00","endDate":"2023-04-09T13:20:11.2893014+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:20:10.9056199+04:00","endDate":"2023-04-03T21:20:10.9057285+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:20:11.2885327+04:00","endDate":"2023-03-29T16:20:11.2885347+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:20:11.2893005+04:00","endDate":"2023-04-09T13:20:11.2893014+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:20:10.9056199+04:00","endDate":"2023-04-03T21:20:10.9057285+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:20:11.2885327+04:00","endDate":"2023-03-29T16:20:11.2885347+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:20:11.2893005+04:00","endDate":"2023-04-09T13:20:11.2893014+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:20:11.2946531+04:00","endDate":"2023-03-24T22:20:11.2947348+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:20:11.3012913+04:00","endDate":"2023-03-29T19:20:11.3012924+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:20:11.2946531+04:00","endDate":"2023-03-24T22:20:11.2947348+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:20:11.3012913+04:00","endDate":"2023-03-29T19:20:11.3012924+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:20:11.2946531+04:00","endDate":"2023-03-24T22:20:11.2947348+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:20:11.3012913+04:00","endDate":"2023-03-29T19:20:11.3012924+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:20:11.2946531+04:00","endDate":"2023-03-24T22:20:11.2947348+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:20:11.3012913+04:00","endDate":"2023-03-29T19:20:11.3012924+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 13:20:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 19.03.2023 13:20:47
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 19.03.2023 13:21:08
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 19.03.2023 13:21:50
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 19.03.2023 13:22:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BCGC1ANM:00000009
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:22:14.8710972+04:00","endDate":"2023-04-03T21:22:14.8710996+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:22:14.8712579+04:00","endDate":"2023-03-29T16:22:14.8712582+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:22:14.8713203+04:00","endDate":"2023-04-09T13:22:14.8713206+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:22:14.8710972+04:00","endDate":"2023-04-03T21:22:14.8710996+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:22:14.8712579+04:00","endDate":"2023-03-29T16:22:14.8712582+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:22:14.8713203+04:00","endDate":"2023-04-09T13:22:14.8713206+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:22:14.8710972+04:00","endDate":"2023-04-03T21:22:14.8710996+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:22:14.8712579+04:00","endDate":"2023-03-29T16:22:14.8712582+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:22:14.8713203+04:00","endDate":"2023-04-09T13:22:14.8713206+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-03T13:22:14.8710972+04:00","endDate":"2023-04-03T21:22:14.8710996+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-29T13:22:14.8712579+04:00","endDate":"2023-03-29T16:22:14.8712582+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-08T13:22:14.8713203+04:00","endDate":"2023-04-09T13:22:14.8713206+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:22:14.8748305+04:00","endDate":"2023-03-24T22:22:14.8748322+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:22:14.8751579+04:00","endDate":"2023-03-29T19:22:14.8751587+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:22:14.8748305+04:00","endDate":"2023-03-24T22:22:14.8748322+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:22:14.8751579+04:00","endDate":"2023-03-29T19:22:14.8751587+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:22:14.8748305+04:00","endDate":"2023-03-24T22:22:14.8748322+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:22:14.8751579+04:00","endDate":"2023-03-29T19:22:14.8751587+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-24T13:22:14.8748305+04:00","endDate":"2023-03-24T22:22:14.8748322+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-28T13:22:14.8751579+04:00","endDate":"2023-03-29T19:22:14.8751587+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 19.03.2023 13:22:16
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Admin@gmail.com",
  "password": "Akaki!1"
}
Time = 19.03.2023 13:22:33
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BCGC1ANN:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFkbWluQGdtYWlsLmNvbSIsIlVzZXJJZCI6IjAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCIsIm5iZiI6MTY3OTIxNzc1NCwiZXhwIjoxNjc5MjIxMzU0LCJpYXQiOjE2NzkyMTc3NTQsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.adIgSs9tkI__ZsC9clZ5DiOLCZIxWvbLpfdTaRBSU6o
ResponseTime = 19.03.2023 13:22:34
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?ticketId=4
RequestBody = 
Time = 19.03.2023 13:22:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BCGC1ANO:00000001
Body = 
ResponseTime = 19.03.2023 13:23:23
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=2
RequestBody = 
Time = 19.03.2023 13:23:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP8BCGC1ANP:00000001
Body = 
ResponseTime = 19.03.2023 13:24:39
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 14:21:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7B:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 14:21:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 14:21:33
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7B:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:21:33.7775708+04:00","endDate":"2023-04-04T22:21:33.7776898+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:21:34.4633473+04:00","endDate":"2023-03-30T17:21:34.4633495+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:21:34.4641728+04:00","endDate":"2023-04-10T14:21:34.4641738+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:21:33.7775708+04:00","endDate":"2023-04-04T22:21:33.7776898+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:21:34.4633473+04:00","endDate":"2023-03-30T17:21:34.4633495+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:21:34.4641728+04:00","endDate":"2023-04-10T14:21:34.4641738+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:21:33.7775708+04:00","endDate":"2023-04-04T22:21:33.7776898+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:21:34.4633473+04:00","endDate":"2023-03-30T17:21:34.4633495+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:21:34.4641728+04:00","endDate":"2023-04-10T14:21:34.4641738+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:21:33.7775708+04:00","endDate":"2023-04-04T22:21:33.7776898+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:21:34.4633473+04:00","endDate":"2023-03-30T17:21:34.4633495+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:21:34.4641728+04:00","endDate":"2023-04-10T14:21:34.4641738+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:21:34.4708037+04:00","endDate":"2023-03-25T23:21:34.4709152+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:21:34.4782612+04:00","endDate":"2023-03-30T20:21:34.4782625+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:21:34.4708037+04:00","endDate":"2023-03-25T23:21:34.4709152+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:21:34.4782612+04:00","endDate":"2023-03-30T20:21:34.4782625+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:21:34.4708037+04:00","endDate":"2023-03-25T23:21:34.4709152+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:21:34.4782612+04:00","endDate":"2023-03-30T20:21:34.4782625+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:21:34.4708037+04:00","endDate":"2023-03-25T23:21:34.4709152+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:21:34.4782612+04:00","endDate":"2023-03-30T20:21:34.4782625+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 14:21:34
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "a@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 14:22:18
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "a@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 14:23:41
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 14:24:33
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7E:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTMwNzg3NywiZXhwIjoxNjc5MzExNDc3LCJpYXQiOjE2NzkzMDc4NzcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.ZA2kF2l6deNRyzZ4R2Gou6dgmYR04WvJOf35jq4jYEE
ResponseTime = 20.03.2023 14:24:38
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Deep purple concert in Tbilisi",
  "description": "Deep purple exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T13:21:33.7775708+04:00",
  "endDate": "2023-04-04T22:21:33.7776898+04:00"
}
Time = 20.03.2023 14:39:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7F:00000001
Body = 
ResponseTime = 20.03.2023 14:39:52
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "New good event",
  "description": "title says it all",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T13:21:33.7775708+04:00",
  "endDate": "2023-04-04T22:21:33.7776898+04:00"
}
Time = 20.03.2023 14:42:44
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7G:00000001
Body = 
ResponseTime = 20.03.2023 14:42:44
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 14:45:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 14:45:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7H:00000003
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 14:45:38
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 14:45:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7H:00000009
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:45:39.9617424+04:00","endDate":"2023-04-04T22:45:39.9617445+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:45:39.9705016+04:00","endDate":"2023-03-30T17:45:39.9705031+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:45:39.97065+04:00","endDate":"2023-04-10T14:45:39.9706506+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:45:39.9617424+04:00","endDate":"2023-04-04T22:45:39.9617445+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:45:39.9705016+04:00","endDate":"2023-03-30T17:45:39.9705031+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:45:39.97065+04:00","endDate":"2023-04-10T14:45:39.9706506+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:45:39.9617424+04:00","endDate":"2023-04-04T22:45:39.9617445+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:45:39.9705016+04:00","endDate":"2023-03-30T17:45:39.9705031+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:45:39.97065+04:00","endDate":"2023-04-10T14:45:39.9706506+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:45:39.9617424+04:00","endDate":"2023-04-04T22:45:39.9617445+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:45:39.9705016+04:00","endDate":"2023-03-30T17:45:39.9705031+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:45:39.97065+04:00","endDate":"2023-04-10T14:45:39.9706506+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:45:39.9731095+04:00","endDate":"2023-03-25T23:45:39.9731114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:45:39.9732877+04:00","endDate":"2023-03-30T20:45:39.9732883+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:45:39.9731095+04:00","endDate":"2023-03-25T23:45:39.9731114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:45:39.9732877+04:00","endDate":"2023-03-30T20:45:39.9732883+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:45:39.9731095+04:00","endDate":"2023-03-25T23:45:39.9731114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:45:39.9732877+04:00","endDate":"2023-03-30T20:45:39.9732883+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:45:39.9731095+04:00","endDate":"2023-03-25T23:45:39.9731114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:45:39.9732877+04:00","endDate":"2023-03-30T20:45:39.9732883+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 14:45:40
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 14:46:15
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMP95JF0FU7I:00000001
Body = 
ResponseTime = 20.03.2023 14:46:15
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 14:46:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP95JF0FU7J:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6IjhjOTk0ZjQ5LWUwNDgtNGU4OC04MzU0LTRlZjlhZmNlZTU3NSIsIm5iZiI6MTY3OTMwOTE5NCwiZXhwIjoxNjc5MzEyNzk0LCJpYXQiOjE2NzkzMDkxOTQsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.AVJpwoKpRUY_y7gkM4faJeBJD6q6Yuj2nYvzQRrx0Bg
ResponseTime = 20.03.2023 14:46:34
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 14:46:54
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 14:47:22
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 14:51:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5NQ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 14:51:42
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 14:51:44
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5NQ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:51:44.4321232+04:00","endDate":"2023-04-04T22:51:44.4322537+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:51:44.8114044+04:00","endDate":"2023-03-30T17:51:44.8114066+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:51:44.8121835+04:00","endDate":"2023-04-10T14:51:44.8121844+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:51:44.4321232+04:00","endDate":"2023-04-04T22:51:44.4322537+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:51:44.8114044+04:00","endDate":"2023-03-30T17:51:44.8114066+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:51:44.8121835+04:00","endDate":"2023-04-10T14:51:44.8121844+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:51:44.4321232+04:00","endDate":"2023-04-04T22:51:44.4322537+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:51:44.8114044+04:00","endDate":"2023-03-30T17:51:44.8114066+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:51:44.8121835+04:00","endDate":"2023-04-10T14:51:44.8121844+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T14:51:44.4321232+04:00","endDate":"2023-04-04T22:51:44.4322537+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T14:51:44.8114044+04:00","endDate":"2023-03-30T17:51:44.8114066+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T14:51:44.8121835+04:00","endDate":"2023-04-10T14:51:44.8121844+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:51:44.8185037+04:00","endDate":"2023-03-25T23:51:44.8185962+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:51:44.8230354+04:00","endDate":"2023-03-30T20:51:44.8230365+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:51:44.8185037+04:00","endDate":"2023-03-25T23:51:44.8185962+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:51:44.8230354+04:00","endDate":"2023-03-30T20:51:44.8230365+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:51:44.8185037+04:00","endDate":"2023-03-25T23:51:44.8185962+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:51:44.8230354+04:00","endDate":"2023-03-30T20:51:44.8230365+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T14:51:44.8185037+04:00","endDate":"2023-03-25T23:51:44.8185962+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T14:51:44.8230354+04:00","endDate":"2023-03-30T20:51:44.8230365+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 14:51:45
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "email": "a@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 14:52:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5NR:00000001
Body = 
ResponseTime = 20.03.2023 14:52:39
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "a@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 14:52:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5NS:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6ImFAZy5jb20iLCJVc2VySWQiOiIyNzk0M2VjZS1kYjE5LTRlYzItOTZiNS04YzQzNmI0YzkwYjUiLCJuYmYiOjE2NzkzMDk1NjksImV4cCI6MTY3OTMxMzE2OSwiaWF0IjoxNjc5MzA5NTY5LCJpc3MiOiJsb2NhbGhvc3QiLCJhdWQiOiJsb2NhbGhvc3QifQ.3ltA-kttlKWn6JqwEe3RVHL7LxMS5LwYspwBwDGCQvw
ResponseTime = 20.03.2023 14:52:49
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Metallica concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T14:51:44.4321232+04:00",
  "endDate": "2023-04-04T22:51:44.4322537+04:00"
}
Time = 20.03.2023 14:52:58
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMP964B1E5NT:00000001
Body = 
ResponseTime = 20.03.2023 14:52:58
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Metallica concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T14:51:44.4321232+04:00",
  "endDate": "2023-04-04T22:51:44.4322537+04:00"
}
Time = 20.03.2023 14:53:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5NU:00000001
Body = 
ResponseTime = 20.03.2023 14:53:13
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Gore verbinski in Tbilisi",
  "description": "Famous movie director is in georgia to spread his knowledge about filmmaking",
  "price": 50,
  "ticketCount": 200,
  "startDate": "2023-03-30T14:51:44.8114044+04:00",
  "endDate": "2023-03-30T17:51:44.8114066+04:00"
}
Time = 20.03.2023 14:53:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5NV:00000001
Body = 
ResponseTime = 20.03.2023 14:53:18
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Fashion week",
  "description": "Famous models came into georgia to participate in fashion week",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-09T14:51:44.8121835+04:00",
  "endDate": "2023-04-10T14:51:44.8121844+04:00"
}
Time = 20.03.2023 14:53:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5O0:00000001
Body = 
ResponseTime = 20.03.2023 14:53:22
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Test 1",
  "description": "Test 1",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-09T13:51:44.8121835+04:00",
  "endDate": "2023-04-10T14:51:44.8121844+04:00"
}
Time = 20.03.2023 14:53:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5O1:00000001
Body = 
ResponseTime = 20.03.2023 14:53:47
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Test 2",
  "description": "Test 2",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-09T13:51:44.8121835+04:00",
  "endDate": "2023-04-10T14:51:44.8121844+04:00"
}
Time = 20.03.2023 14:53:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP964B1E5O2:00000001
Body = 
ResponseTime = 20.03.2023 14:53:53
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 20.03.2023 14:59:53
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 20.03.2023 15:00:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 20.03.2023 15:01:26
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:06:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLBS:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:06:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:06:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLBS:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:06:48.6821584+04:00","endDate":"2023-04-04T23:06:48.6823017+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:06:49.3739507+04:00","endDate":"2023-03-30T18:06:49.373953+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:06:49.3750529+04:00","endDate":"2023-04-10T15:06:49.3750547+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:06:48.6821584+04:00","endDate":"2023-04-04T23:06:48.6823017+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:06:49.3739507+04:00","endDate":"2023-03-30T18:06:49.373953+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:06:49.3750529+04:00","endDate":"2023-04-10T15:06:49.3750547+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:06:48.6821584+04:00","endDate":"2023-04-04T23:06:48.6823017+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:06:49.3739507+04:00","endDate":"2023-03-30T18:06:49.373953+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:06:49.3750529+04:00","endDate":"2023-04-10T15:06:49.3750547+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:06:48.6821584+04:00","endDate":"2023-04-04T23:06:48.6823017+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:06:49.3739507+04:00","endDate":"2023-03-30T18:06:49.373953+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:06:49.3750529+04:00","endDate":"2023-04-10T15:06:49.3750547+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:06:49.3824256+04:00","endDate":"2023-03-26T00:06:49.3825269+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:06:49.3878226+04:00","endDate":"2023-03-30T21:06:49.3878244+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:06:49.3824256+04:00","endDate":"2023-03-26T00:06:49.3825269+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:06:49.3878226+04:00","endDate":"2023-03-30T21:06:49.3878244+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:06:49.3824256+04:00","endDate":"2023-03-26T00:06:49.3825269+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:06:49.3878226+04:00","endDate":"2023-03-30T21:06:49.3878244+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:06:49.3824256+04:00","endDate":"2023-03-26T00:06:49.3825269+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:06:49.3878226+04:00","endDate":"2023-03-30T21:06:49.3878244+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:06:49
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/Register
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 15:08:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLBT:00000001
Body = 
ResponseTime = 20.03.2023 15:08:23
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 15:08:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLBU:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMxMDUzNywiZXhwIjoxNjc5MzE0MTM3LCJpYXQiOjE2NzkzMTA1MzcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.tbHFNjoYxnXwzsbud120FVwxBU1sbsp06undRYwumBw
ResponseTime = 20.03.2023 15:08:58
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Metallica concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T15:06:48.6821584+04:00",
  "endDate": "2023-04-04T23:06:48.6823017+04:00"
}
Time = 20.03.2023 15:09:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLBV:00000001
Body = 
ResponseTime = 20.03.2023 15:09:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Gore verbinski in Tbilisi",
  "description": "Famous movie director is in georgia to spread his knowledge about filmmaking",
  "price": 50,
  "ticketCount": 200,
  "startDate": "2023-03-30T15:06:49.3739507+04:00",
  "endDate": "2023-03-30T18:06:49.373953+04:00"
}
Time = 20.03.2023 15:09:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC0:00000001
Body = 
ResponseTime = 20.03.2023 15:09:17
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Fashion week",
  "description": "Famous models came into georgia to participate in fashion week",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-09T15:06:49.3750529+04:00",
  "endDate": "2023-04-10T15:06:49.3750547+04:00"
}
Time = 20.03.2023 15:09:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC0:00000003
Body = 
ResponseTime = 20.03.2023 15:09:22
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "TEst 1",
  "description": "TEst 1",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-09T14:06:49.3750529+04:00",
  "endDate": "2023-04-10T15:06:49.3750547+04:00"
}
Time = 20.03.2023 15:14:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC1:00000001
Body = 
ResponseTime = 20.03.2023 15:14:25
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "TEst 2",
  "description": "TEst 2",
  "price": 200,
  "ticketCount": 100,
  "startDate": "2023-04-09T14:06:49.3750529+04:00",
  "endDate": "2023-04-10T15:06:49.3750547+04:00"
}
Time = 20.03.2023 15:14:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC2:00000001
Body = 
ResponseTime = 20.03.2023 15:14:30
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 15:14:43
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:14:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC3:00000003
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:14:49
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:14:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC3:00000009
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:14:50.6325896+04:00","endDate":"2023-04-04T23:14:50.6325914+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:14:50.6328+04:00","endDate":"2023-03-30T18:14:50.6328008+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:14:50.6329091+04:00","endDate":"2023-04-10T15:14:50.6329098+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:14:50.6325896+04:00","endDate":"2023-04-04T23:14:50.6325914+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:14:50.6328+04:00","endDate":"2023-03-30T18:14:50.6328008+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:14:50.6329091+04:00","endDate":"2023-04-10T15:14:50.6329098+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:14:50.6325896+04:00","endDate":"2023-04-04T23:14:50.6325914+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:14:50.6328+04:00","endDate":"2023-03-30T18:14:50.6328008+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:14:50.6329091+04:00","endDate":"2023-04-10T15:14:50.6329098+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:14:50.6325896+04:00","endDate":"2023-04-04T23:14:50.6325914+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:14:50.6328+04:00","endDate":"2023-03-30T18:14:50.6328008+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:14:50.6329091+04:00","endDate":"2023-04-10T15:14:50.6329098+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:14:50.6348436+04:00","endDate":"2023-03-26T00:14:50.6348449+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:14:50.6349875+04:00","endDate":"2023-03-30T21:14:50.6349882+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:14:50.6348436+04:00","endDate":"2023-03-26T00:14:50.6348449+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:14:50.6349875+04:00","endDate":"2023-03-30T21:14:50.6349882+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:14:50.6348436+04:00","endDate":"2023-03-26T00:14:50.6348449+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:14:50.6349875+04:00","endDate":"2023-03-30T21:14:50.6349882+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:14:50.6348436+04:00","endDate":"2023-03-26T00:14:50.6348449+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:14:50.6349875+04:00","endDate":"2023-03-30T21:14:50.6349882+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:14:51
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "a@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 15:15:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 15:16:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC5:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMxMDk5NiwiZXhwIjoxNjc5MzE0NTk2LCJpYXQiOjE2NzkzMTA5OTYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.cmyf1aL-_KhTVQNEGHqXZ1AXxmlElNkpjZLHTkOaMu8
ResponseTime = 20.03.2023 15:16:36
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 15:16:52
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 15:17:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC7:00000001
Body = 
ResponseTime = 20.03.2023 15:17:38
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 15:19:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96CORJLC8:00000001
Body = 
ResponseTime = 20.03.2023 15:19:56
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:20:29
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:21:13
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:21:59
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:22:43
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:24:33
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:27:01
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:31:18
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:33:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96RGAT3TR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:33:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:33:10
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96RGAT3TR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:33:10.7554683+04:00","endDate":"2023-04-04T23:33:10.7555997+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:33:11.2637912+04:00","endDate":"2023-03-30T18:33:11.263793+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:33:11.2645691+04:00","endDate":"2023-04-10T15:33:11.2645701+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:33:10.7554683+04:00","endDate":"2023-04-04T23:33:10.7555997+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:33:11.2637912+04:00","endDate":"2023-03-30T18:33:11.263793+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:33:11.2645691+04:00","endDate":"2023-04-10T15:33:11.2645701+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:33:10.7554683+04:00","endDate":"2023-04-04T23:33:10.7555997+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:33:11.2637912+04:00","endDate":"2023-03-30T18:33:11.263793+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:33:11.2645691+04:00","endDate":"2023-04-10T15:33:11.2645701+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:33:10.7554683+04:00","endDate":"2023-04-04T23:33:10.7555997+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:33:11.2637912+04:00","endDate":"2023-03-30T18:33:11.263793+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:33:11.2645691+04:00","endDate":"2023-04-10T15:33:11.2645701+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:33:11.2710737+04:00","endDate":"2023-03-26T00:33:11.2711928+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:33:11.2762474+04:00","endDate":"2023-03-30T21:33:11.2762485+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:33:11.2710737+04:00","endDate":"2023-03-26T00:33:11.2711928+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:33:11.2762474+04:00","endDate":"2023-03-30T21:33:11.2762485+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:33:11.2710737+04:00","endDate":"2023-03-26T00:33:11.2711928+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:33:11.2762474+04:00","endDate":"2023-03-30T21:33:11.2762485+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:33:11.2710737+04:00","endDate":"2023-03-26T00:33:11.2711928+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:33:11.2762474+04:00","endDate":"2023-03-30T21:33:11.2762485+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:33:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 15:33:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96RGAT3TS:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMxMjAwOSwiZXhwIjoxNjc5MzE1NjA5LCJpYXQiOjE2NzkzMTIwMDksImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.bpWNLFQDfouwTllHIHhNZtSr1wE6xwQqWr55UJgPffw
ResponseTime = 20.03.2023 15:33:30
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:34:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96RGAT3TT:00000001
Body = 
ResponseTime = 20.03.2023 15:34:19
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:34:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96RGAT3TU:00000001
Body = 
ResponseTime = 20.03.2023 15:35:59
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:36:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:38:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E78:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:38:13
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:38:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E78:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:38:14.5903554+04:00","endDate":"2023-04-04T23:38:14.5905728+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:38:15.3428135+04:00","endDate":"2023-03-30T18:38:15.3428153+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:38:15.343845+04:00","endDate":"2023-04-10T15:38:15.3438462+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:38:14.5903554+04:00","endDate":"2023-04-04T23:38:14.5905728+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:38:15.3428135+04:00","endDate":"2023-03-30T18:38:15.3428153+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:38:15.343845+04:00","endDate":"2023-04-10T15:38:15.3438462+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:38:14.5903554+04:00","endDate":"2023-04-04T23:38:14.5905728+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:38:15.3428135+04:00","endDate":"2023-03-30T18:38:15.3428153+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:38:15.343845+04:00","endDate":"2023-04-10T15:38:15.3438462+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:38:14.5903554+04:00","endDate":"2023-04-04T23:38:14.5905728+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:38:15.3428135+04:00","endDate":"2023-03-30T18:38:15.3428153+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:38:15.343845+04:00","endDate":"2023-04-10T15:38:15.3438462+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:38:15.3532015+04:00","endDate":"2023-03-26T00:38:15.3533021+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:38:15.3581297+04:00","endDate":"2023-03-30T21:38:15.3581309+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:38:15.3532015+04:00","endDate":"2023-03-26T00:38:15.3533021+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:38:15.3581297+04:00","endDate":"2023-03-30T21:38:15.3581309+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:38:15.3532015+04:00","endDate":"2023-03-26T00:38:15.3533021+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:38:15.3581297+04:00","endDate":"2023-03-30T21:38:15.3581309+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:38:15.3532015+04:00","endDate":"2023-03-26T00:38:15.3533021+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:38:15.3581297+04:00","endDate":"2023-03-30T21:38:15.3581309+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:38:15
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 15:38:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E79:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMxMjMxNCwiZXhwIjoxNjc5MzE1OTE0LCJpYXQiOjE2NzkzMTIzMTQsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.pA8JE7n1K80WJ7LOMcTv19jI7pas-kDqpn2mhouAdoc
ResponseTime = 20.03.2023 15:38:35
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:39:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E7A:00000001
Body = 
ResponseTime = 20.03.2023 15:39:54
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:41:16
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E7B:00000001
Body = 
ResponseTime = 20.03.2023 15:43:55
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "chxeidze concert in Tbilisi",
  "description": "chxeidze exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-02-04T15:38:14.5903554+04:00",
  "endDate": "2023-04-04T23:38:14.5905728+04:00"
}
Time = 20.03.2023 15:44:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E7B:00000003
Body = 
ResponseTime = 20.03.2023 15:44:31
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=6
RequestBody = 
Time = 20.03.2023 15:44:46
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:47:01
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP96UAU0E7C:00000001
Body = 
ResponseTime = 20.03.2023 15:47:03
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:51:05
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:54:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9775791EF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:54:01
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:54:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9775791EF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:54:02.6092955+04:00","endDate":"2023-04-04T23:54:02.6094495+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:54:03.0885774+04:00","endDate":"2023-03-30T18:54:03.0885791+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:54:03.0895653+04:00","endDate":"2023-04-10T15:54:03.0895669+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:54:02.6092955+04:00","endDate":"2023-04-04T23:54:02.6094495+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:54:03.0885774+04:00","endDate":"2023-03-30T18:54:03.0885791+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:54:03.0895653+04:00","endDate":"2023-04-10T15:54:03.0895669+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:54:02.6092955+04:00","endDate":"2023-04-04T23:54:02.6094495+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:54:03.0885774+04:00","endDate":"2023-03-30T18:54:03.0885791+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:54:03.0895653+04:00","endDate":"2023-04-10T15:54:03.0895669+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:54:02.6092955+04:00","endDate":"2023-04-04T23:54:02.6094495+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:54:03.0885774+04:00","endDate":"2023-03-30T18:54:03.0885791+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:54:03.0895653+04:00","endDate":"2023-04-10T15:54:03.0895669+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:54:03.0977032+04:00","endDate":"2023-03-26T00:54:03.0978068+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:54:03.1039084+04:00","endDate":"2023-03-30T21:54:03.1039106+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:54:03.0977032+04:00","endDate":"2023-03-26T00:54:03.0978068+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:54:03.1039084+04:00","endDate":"2023-03-30T21:54:03.1039106+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:54:03.0977032+04:00","endDate":"2023-03-26T00:54:03.0978068+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:54:03.1039084+04:00","endDate":"2023-03-30T21:54:03.1039106+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:54:03.0977032+04:00","endDate":"2023-03-26T00:54:03.0978068+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:54:03.1039084+04:00","endDate":"2023-03-30T21:54:03.1039106+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:54:03
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:54:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:56:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP978I4EML1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:56:31
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:56:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP978I4EML1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:56:32.2019554+04:00","endDate":"2023-04-04T23:56:32.2021028+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:56:32.6178229+04:00","endDate":"2023-03-30T18:56:32.6178249+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:56:32.6185813+04:00","endDate":"2023-04-10T15:56:32.6185819+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:56:32.2019554+04:00","endDate":"2023-04-04T23:56:32.2021028+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:56:32.6178229+04:00","endDate":"2023-03-30T18:56:32.6178249+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:56:32.6185813+04:00","endDate":"2023-04-10T15:56:32.6185819+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:56:32.2019554+04:00","endDate":"2023-04-04T23:56:32.2021028+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:56:32.6178229+04:00","endDate":"2023-03-30T18:56:32.6178249+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:56:32.6185813+04:00","endDate":"2023-04-10T15:56:32.6185819+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:56:32.2019554+04:00","endDate":"2023-04-04T23:56:32.2021028+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:56:32.6178229+04:00","endDate":"2023-03-30T18:56:32.6178249+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:56:32.6185813+04:00","endDate":"2023-04-10T15:56:32.6185819+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:56:32.6246717+04:00","endDate":"2023-03-26T00:56:32.6247994+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:56:32.6363462+04:00","endDate":"2023-03-30T21:56:32.6363477+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:56:32.6246717+04:00","endDate":"2023-03-26T00:56:32.6247994+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:56:32.6363462+04:00","endDate":"2023-03-30T21:56:32.6363477+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:56:32.6246717+04:00","endDate":"2023-03-26T00:56:32.6247994+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:56:32.6363462+04:00","endDate":"2023-03-30T21:56:32.6363477+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:56:32.6246717+04:00","endDate":"2023-03-26T00:56:32.6247994+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:56:32.6363462+04:00","endDate":"2023-03-30T21:56:32.6363477+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:56:32
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:56:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP978I4EML1:00000009
Body = 
ResponseTime = 20.03.2023 15:56:41
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:57:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP979BH3QQN:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 15:57:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:57:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP979BH3QQN:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:57:56.9173393+04:00","endDate":"2023-04-04T23:57:56.917483+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:57:57.4546704+04:00","endDate":"2023-03-30T18:57:57.4546732+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:57:57.4557557+04:00","endDate":"2023-04-10T15:57:57.455757+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:57:56.9173393+04:00","endDate":"2023-04-04T23:57:56.917483+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:57:57.4546704+04:00","endDate":"2023-03-30T18:57:57.4546732+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:57:57.4557557+04:00","endDate":"2023-04-10T15:57:57.455757+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:57:56.9173393+04:00","endDate":"2023-04-04T23:57:56.917483+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:57:57.4546704+04:00","endDate":"2023-03-30T18:57:57.4546732+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:57:57.4557557+04:00","endDate":"2023-04-10T15:57:57.455757+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T15:57:56.9173393+04:00","endDate":"2023-04-04T23:57:56.917483+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T15:57:57.4546704+04:00","endDate":"2023-03-30T18:57:57.4546732+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T15:57:57.4557557+04:00","endDate":"2023-04-10T15:57:57.455757+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:57:57.4630999+04:00","endDate":"2023-03-26T00:57:57.4632138+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:57:57.4683166+04:00","endDate":"2023-03-30T21:57:57.4683181+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:57:57.4630999+04:00","endDate":"2023-03-26T00:57:57.4632138+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:57:57.4683166+04:00","endDate":"2023-03-30T21:57:57.4683181+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:57:57.4630999+04:00","endDate":"2023-03-26T00:57:57.4632138+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:57:57.4683166+04:00","endDate":"2023-03-30T21:57:57.4683181+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T15:57:57.4630999+04:00","endDate":"2023-03-26T00:57:57.4632138+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T15:57:57.4683166+04:00","endDate":"2023-03-30T21:57:57.4683181+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 15:57:57
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 15:57:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP979BH3QQN:00000009
Body = 
ResponseTime = 20.03.2023 15:58:03
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:00:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97AK9D40P:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:00:12
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:00:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97AK9D40P:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:00:13.8046887+04:00","endDate":"2023-04-05T00:00:13.8054526+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:00:14.3741987+04:00","endDate":"2023-03-30T19:00:14.3742007+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:00:14.3749606+04:00","endDate":"2023-04-10T16:00:14.3749618+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:00:13.8046887+04:00","endDate":"2023-04-05T00:00:13.8054526+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:00:14.3741987+04:00","endDate":"2023-03-30T19:00:14.3742007+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:00:14.3749606+04:00","endDate":"2023-04-10T16:00:14.3749618+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:00:13.8046887+04:00","endDate":"2023-04-05T00:00:13.8054526+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:00:14.3741987+04:00","endDate":"2023-03-30T19:00:14.3742007+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:00:14.3749606+04:00","endDate":"2023-04-10T16:00:14.3749618+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:00:13.8046887+04:00","endDate":"2023-04-05T00:00:13.8054526+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:00:14.3741987+04:00","endDate":"2023-03-30T19:00:14.3742007+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:00:14.3749606+04:00","endDate":"2023-04-10T16:00:14.3749618+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:00:14.3822155+04:00","endDate":"2023-03-26T01:00:14.3823188+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:00:14.3887057+04:00","endDate":"2023-03-30T22:00:14.3887073+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:00:14.3822155+04:00","endDate":"2023-03-26T01:00:14.3823188+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:00:14.3887057+04:00","endDate":"2023-03-30T22:00:14.3887073+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:00:14.3822155+04:00","endDate":"2023-03-26T01:00:14.3823188+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:00:14.3887057+04:00","endDate":"2023-03-30T22:00:14.3887073+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:00:14.3822155+04:00","endDate":"2023-03-26T01:00:14.3823188+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:00:14.3887057+04:00","endDate":"2023-03-30T22:00:14.3887073+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:00:14
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:00:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97AK9D40P:00000009
Body = 
ResponseTime = 20.03.2023 16:00:57
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:02:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97C2BJIM1:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:02:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:02:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97C2BJIM1:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:02:49.2894598+04:00","endDate":"2023-04-05T00:02:49.2896019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:02:49.8135244+04:00","endDate":"2023-03-30T19:02:49.8135263+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:02:49.814135+04:00","endDate":"2023-04-10T16:02:49.8141356+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:02:49.2894598+04:00","endDate":"2023-04-05T00:02:49.2896019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:02:49.8135244+04:00","endDate":"2023-03-30T19:02:49.8135263+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:02:49.814135+04:00","endDate":"2023-04-10T16:02:49.8141356+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:02:49.2894598+04:00","endDate":"2023-04-05T00:02:49.2896019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:02:49.8135244+04:00","endDate":"2023-03-30T19:02:49.8135263+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:02:49.814135+04:00","endDate":"2023-04-10T16:02:49.8141356+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:02:49.2894598+04:00","endDate":"2023-04-05T00:02:49.2896019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:02:49.8135244+04:00","endDate":"2023-03-30T19:02:49.8135263+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:02:49.814135+04:00","endDate":"2023-04-10T16:02:49.8141356+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:02:49.8232413+04:00","endDate":"2023-03-26T01:02:49.8233346+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:02:49.8295003+04:00","endDate":"2023-03-30T22:02:49.8295012+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:02:49.8232413+04:00","endDate":"2023-03-26T01:02:49.8233346+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:02:49.8295003+04:00","endDate":"2023-03-30T22:02:49.8295012+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:02:49.8232413+04:00","endDate":"2023-03-26T01:02:49.8233346+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:02:49.8295003+04:00","endDate":"2023-03-30T22:02:49.8295012+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:02:49.8232413+04:00","endDate":"2023-03-26T01:02:49.8233346+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:02:49.8295003+04:00","endDate":"2023-03-30T22:02:49.8295012+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:02:50
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:02:51
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:04:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97D8RK9JK:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:04:56
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:04:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97D8RK9JK:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:04:58.0871254+04:00","endDate":"2023-04-05T00:04:58.0872562+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:04:58.6563061+04:00","endDate":"2023-03-30T19:04:58.6563087+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:04:58.6572111+04:00","endDate":"2023-04-10T16:04:58.6572122+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:04:58.0871254+04:00","endDate":"2023-04-05T00:04:58.0872562+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:04:58.6563061+04:00","endDate":"2023-03-30T19:04:58.6563087+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:04:58.6572111+04:00","endDate":"2023-04-10T16:04:58.6572122+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:04:58.0871254+04:00","endDate":"2023-04-05T00:04:58.0872562+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:04:58.6563061+04:00","endDate":"2023-03-30T19:04:58.6563087+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:04:58.6572111+04:00","endDate":"2023-04-10T16:04:58.6572122+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:04:58.0871254+04:00","endDate":"2023-04-05T00:04:58.0872562+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:04:58.6563061+04:00","endDate":"2023-03-30T19:04:58.6563087+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:04:58.6572111+04:00","endDate":"2023-04-10T16:04:58.6572122+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:04:58.6659159+04:00","endDate":"2023-03-26T01:04:58.6660437+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:04:58.6723917+04:00","endDate":"2023-03-30T22:04:58.6723936+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:04:58.6659159+04:00","endDate":"2023-03-26T01:04:58.6660437+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:04:58.6723917+04:00","endDate":"2023-03-30T22:04:58.6723936+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:04:58.6659159+04:00","endDate":"2023-03-26T01:04:58.6660437+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:04:58.6723917+04:00","endDate":"2023-03-30T22:04:58.6723936+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:04:58.6659159+04:00","endDate":"2023-03-26T01:04:58.6660437+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:04:58.6723917+04:00","endDate":"2023-03-30T22:04:58.6723936+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:04:58
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:05:04
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:08:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2MR:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:08:57
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:08:58
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2MR:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:08:59.0641751+04:00","endDate":"2023-04-05T00:08:59.0643131+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:08:59.7143554+04:00","endDate":"2023-03-30T19:08:59.7143576+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:08:59.7151067+04:00","endDate":"2023-04-10T16:08:59.7151074+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:08:59.0641751+04:00","endDate":"2023-04-05T00:08:59.0643131+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:08:59.7143554+04:00","endDate":"2023-03-30T19:08:59.7143576+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:08:59.7151067+04:00","endDate":"2023-04-10T16:08:59.7151074+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:08:59.0641751+04:00","endDate":"2023-04-05T00:08:59.0643131+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:08:59.7143554+04:00","endDate":"2023-03-30T19:08:59.7143576+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:08:59.7151067+04:00","endDate":"2023-04-10T16:08:59.7151074+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:08:59.0641751+04:00","endDate":"2023-04-05T00:08:59.0643131+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:08:59.7143554+04:00","endDate":"2023-03-30T19:08:59.7143576+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:08:59.7151067+04:00","endDate":"2023-04-10T16:08:59.7151074+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:08:59.7208888+04:00","endDate":"2023-03-26T01:08:59.7209852+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:08:59.7312274+04:00","endDate":"2023-03-30T22:08:59.7312285+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:08:59.7208888+04:00","endDate":"2023-03-26T01:08:59.7209852+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:08:59.7312274+04:00","endDate":"2023-03-30T22:08:59.7312285+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:08:59.7208888+04:00","endDate":"2023-03-26T01:08:59.7209852+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:08:59.7312274+04:00","endDate":"2023-03-30T22:08:59.7312285+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:08:59.7208888+04:00","endDate":"2023-03-26T01:08:59.7209852+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:08:59.7312274+04:00","endDate":"2023-03-30T22:08:59.7312285+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:09:00
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 16:09:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2MS:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMxNDE2MSwiZXhwIjoxNjc5MzE3NzYxLCJpYXQiOjE2NzkzMTQxNjEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.7acf4jQMWvm8I40uAjo8C3rvEBSZmUCND1GAhf6gNQE
ResponseTime = 20.03.2023 16:09:21
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 16:10:04
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2MT:00000001
Body = 
ResponseTime = 20.03.2023 16:10:06
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 16:10:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2MU:00000001
Body = 
ResponseTime = 20.03.2023 16:10:09
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=4
RequestBody = 
Time = 20.03.2023 16:10:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2MU:00000003
Body = 
ResponseTime = 20.03.2023 16:10:11
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?ticketId=1
RequestBody = 
Time = 20.03.2023 16:10:32
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?ticketId=3
RequestBody = 
Time = 20.03.2023 16:10:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N0:00000001
Body = 
ResponseTime = 20.03.2023 16:10:41
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?ticketId=4
RequestBody = 
Time = 20.03.2023 16:10:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N0:00000003
Body = 
ResponseTime = 20.03.2023 16:10:43
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BuyTicket
IsSecured = True
QueryString = ?ticketId=5
RequestBody = 
Time = 20.03.2023 16:10:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N0:00000005
Body = 
ResponseTime = 20.03.2023 16:10:45
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 20.03.2023 16:10:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N1:00000001
Body = 
ResponseTime = 20.03.2023 16:10:51
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=1
RequestBody = 
Time = 20.03.2023 16:11:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N2:00000001
Body = 
ResponseTime = 20.03.2023 16:11:06
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=5
RequestBody = 
Time = 20.03.2023 16:13:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N3:00000001
Body = 
ResponseTime = 20.03.2023 16:13:15
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=6
RequestBody = 
Time = 20.03.2023 16:13:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N4:00000001
Body = 
ResponseTime = 20.03.2023 16:13:18
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:13:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N5:00000001
Body = 
ResponseTime = 20.03.2023 16:13:53
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=5
RequestBody = 
Time = 20.03.2023 16:15:44
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N6:00000001
Body = 
ResponseTime = 20.03.2023 16:15:44
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=6
RequestBody = 
Time = 20.03.2023 16:15:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97FGNI2N6:00000003
Body = 
ResponseTime = 20.03.2023 16:15:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:19:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97LDQKJQH:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:19:32
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:19:34
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97LDQKJQI:00000001
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:19:34.5313353+04:00","endDate":"2023-04-05T00:19:34.5314601+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:19:34.9530485+04:00","endDate":"2023-03-30T19:19:34.9530507+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:19:34.9539427+04:00","endDate":"2023-04-10T16:19:34.9539438+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:19:34.5313353+04:00","endDate":"2023-04-05T00:19:34.5314601+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:19:34.9530485+04:00","endDate":"2023-03-30T19:19:34.9530507+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:19:34.9539427+04:00","endDate":"2023-04-10T16:19:34.9539438+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:19:34.5313353+04:00","endDate":"2023-04-05T00:19:34.5314601+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:19:34.9530485+04:00","endDate":"2023-03-30T19:19:34.9530507+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:19:34.9539427+04:00","endDate":"2023-04-10T16:19:34.9539438+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:19:34.5313353+04:00","endDate":"2023-04-05T00:19:34.5314601+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:19:34.9530485+04:00","endDate":"2023-03-30T19:19:34.9530507+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:19:34.9539427+04:00","endDate":"2023-04-10T16:19:34.9539438+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:19:34.9618992+04:00","endDate":"2023-03-26T01:19:34.962007+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:19:34.971092+04:00","endDate":"2023-03-30T22:19:34.9710935+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:19:34.9618992+04:00","endDate":"2023-03-26T01:19:34.962007+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:19:34.971092+04:00","endDate":"2023-03-30T22:19:34.9710935+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:19:34.9618992+04:00","endDate":"2023-03-26T01:19:34.962007+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:19:34.971092+04:00","endDate":"2023-03-30T22:19:34.9710935+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:19:34.9618992+04:00","endDate":"2023-03-26T01:19:34.962007+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:19:34.971092+04:00","endDate":"2023-03-30T22:19:34.9710935+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:19:35
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:46
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RD:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:28:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:48
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RA:00000002
Body = 
ResponseTime = 20.03.2023 16:28:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RD:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:28:49.1460789+04:00","endDate":"2023-04-05T00:28:49.1462069+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:28:49.817861+04:00","endDate":"2023-03-30T19:28:49.8178636+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:28:49.818993+04:00","endDate":"2023-04-10T16:28:49.8189947+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:28:49.1460789+04:00","endDate":"2023-04-05T00:28:49.1462069+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:28:49.817861+04:00","endDate":"2023-03-30T19:28:49.8178636+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:28:49.818993+04:00","endDate":"2023-04-10T16:28:49.8189947+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:28:49.1460789+04:00","endDate":"2023-04-05T00:28:49.1462069+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:28:49.817861+04:00","endDate":"2023-03-30T19:28:49.8178636+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:28:49.818993+04:00","endDate":"2023-04-10T16:28:49.8189947+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:28:49.1460789+04:00","endDate":"2023-04-05T00:28:49.1462069+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:28:49.817861+04:00","endDate":"2023-03-30T19:28:49.8178636+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:28:49.818993+04:00","endDate":"2023-04-10T16:28:49.8189947+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:28:49.8304014+04:00","endDate":"2023-03-26T01:28:49.8305173+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:28:49.8394422+04:00","endDate":"2023-03-30T22:28:49.8394435+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:28:49.8304014+04:00","endDate":"2023-03-26T01:28:49.8305173+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:28:49.8394422+04:00","endDate":"2023-03-30T22:28:49.8394435+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:28:49.8304014+04:00","endDate":"2023-03-26T01:28:49.8305173+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:28:49.8394422+04:00","endDate":"2023-03-30T22:28:49.8394435+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:28:49.8304014+04:00","endDate":"2023-03-26T01:28:49.8305173+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:28:49.8394422+04:00","endDate":"2023-03-30T22:28:49.8394435+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:28:50
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RE:00000002
Body = 
ResponseTime = 20.03.2023 16:28:50
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:51
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RF:00000002
Body = 
ResponseTime = 20.03.2023 16:28:51
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RG:00000002
Body = 
ResponseTime = 20.03.2023 16:28:54
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:28:57
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RH:00000002
Body = 
ResponseTime = 20.03.2023 16:28:57
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RI:00000002
Body = 
ResponseTime = 20.03.2023 16:29:00
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RJ:00000002
Body = 
ResponseTime = 20.03.2023 16:29:03
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RK:00000002
Body = 
ResponseTime = 20.03.2023 16:29:06
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RL:00000002
Body = 
ResponseTime = 20.03.2023 16:29:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RM:00000002
Body = 
ResponseTime = 20.03.2023 16:29:12
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97QJ593RN:00000002
Body = 
ResponseTime = 20.03.2023 16:29:15
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:35
 logged from Middleware
IP = 127.0.0.1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84VB:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 16:29:36
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84V9:00000002
Body = 
ResponseTime = 20.03.2023 16:29:39
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84VC:00000002
Body = 
ResponseTime = 20.03.2023 16:29:39
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84VD:00000002
Body = 
ResponseTime = 20.03.2023 16:29:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84VB:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:29:38.9824862+04:00","endDate":"2023-04-05T00:29:38.9826149+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:29:39.9312385+04:00","endDate":"2023-03-30T19:29:39.9312413+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:29:39.9322623+04:00","endDate":"2023-04-10T16:29:39.9322636+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:29:38.9824862+04:00","endDate":"2023-04-05T00:29:38.9826149+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:29:39.9312385+04:00","endDate":"2023-03-30T19:29:39.9312413+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:29:39.9322623+04:00","endDate":"2023-04-10T16:29:39.9322636+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:29:38.9824862+04:00","endDate":"2023-04-05T00:29:38.9826149+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:29:39.9312385+04:00","endDate":"2023-03-30T19:29:39.9312413+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:29:39.9322623+04:00","endDate":"2023-04-10T16:29:39.9322636+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T16:29:38.9824862+04:00","endDate":"2023-04-05T00:29:38.9826149+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T16:29:39.9312385+04:00","endDate":"2023-03-30T19:29:39.9312413+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T16:29:39.9322623+04:00","endDate":"2023-04-10T16:29:39.9322636+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:29:39.9413771+04:00","endDate":"2023-03-26T01:29:39.9414961+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:29:39.952505+04:00","endDate":"2023-03-30T22:29:39.9525064+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:29:39.9413771+04:00","endDate":"2023-03-26T01:29:39.9414961+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:29:39.952505+04:00","endDate":"2023-03-30T22:29:39.9525064+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:29:39.9413771+04:00","endDate":"2023-03-26T01:29:39.9414961+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:29:39.952505+04:00","endDate":"2023-03-30T22:29:39.9525064+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T16:29:39.9413771+04:00","endDate":"2023-03-26T01:29:39.9414961+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T16:29:39.952505+04:00","endDate":"2023-03-30T22:29:39.9525064+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 16:29:40
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:42
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84VE:00000002
Body = 
ResponseTime = 20.03.2023 16:29:42
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 16:29:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP97R1R84VF:00000002
Body = 
ResponseTime = 20.03.2023 16:29:45
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:07
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S3:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:00:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S0:00000002
Body = 
ResponseTime = 20.03.2023 18:00:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S4:00000002
Body = 
ResponseTime = 20.03.2023 18:00:10
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:11
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S5:00000002
Body = 
ResponseTime = 20.03.2023 18:00:13
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:13
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S7:00000002
Body = 
ResponseTime = 20.03.2023 18:00:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S3:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:00:13.5906295+04:00","endDate":"2023-04-05T02:00:13.5907756+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:00:13.7829471+04:00","endDate":"2023-03-30T21:00:13.7829492+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:00:13.7841489+04:00","endDate":"2023-04-10T18:00:13.7841503+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:00:13.5906295+04:00","endDate":"2023-04-05T02:00:13.5907756+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:00:13.7829471+04:00","endDate":"2023-03-30T21:00:13.7829492+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:00:13.7841489+04:00","endDate":"2023-04-10T18:00:13.7841503+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:00:13.5906295+04:00","endDate":"2023-04-05T02:00:13.5907756+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:00:13.7829471+04:00","endDate":"2023-03-30T21:00:13.7829492+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:00:13.7841489+04:00","endDate":"2023-04-10T18:00:13.7841503+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:00:13.5906295+04:00","endDate":"2023-04-05T02:00:13.5907756+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:00:13.7829471+04:00","endDate":"2023-03-30T21:00:13.7829492+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:00:13.7841489+04:00","endDate":"2023-04-10T18:00:13.7841503+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:00:13.8179539+04:00","endDate":"2023-03-26T03:00:13.8180769+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:00:13.8263583+04:00","endDate":"2023-03-31T00:00:13.8263598+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:00:13.8179539+04:00","endDate":"2023-03-26T03:00:13.8180769+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:00:13.8263583+04:00","endDate":"2023-03-31T00:00:13.8263598+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:00:13.8179539+04:00","endDate":"2023-03-26T03:00:13.8180769+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:00:13.8263583+04:00","endDate":"2023-03-31T00:00:13.8263598+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:00:13.8179539+04:00","endDate":"2023-03-26T03:00:13.8180769+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:00:13.8263583+04:00","endDate":"2023-03-31T00:00:13.8263598+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:00:15
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:15
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36S9:00000002
Body = 
ResponseTime = 20.03.2023 18:00:17
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:18
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SB:00000002
Body = 
ResponseTime = 20.03.2023 18:00:20
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:21
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:23
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SD:00000002
Body = 
ResponseTime = 20.03.2023 18:00:23
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:24
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SF:00000002
Body = 
ResponseTime = 20.03.2023 18:00:26
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:27
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SH:00000002
Body = 
ResponseTime = 20.03.2023 18:00:29
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:30
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SJ:00000002
Body = 
ResponseTime = 20.03.2023 18:00:32
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:33
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:36
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SL:00000002
Body = 
ResponseTime = 20.03.2023 18:00:36
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:36
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SN:00000002
Body = 
ResponseTime = 20.03.2023 18:00:40
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:40
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:42
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SP:00000002
Body = 
ResponseTime = 20.03.2023 18:00:42
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:42
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:44
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SR:00000002
Body = 
ResponseTime = 20.03.2023 18:00:44
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:45
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36ST:00000002
Body = 
ResponseTime = 20.03.2023 18:00:47
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:48
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36SV:00000002
Body = 
ResponseTime = 20.03.2023 18:00:50
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:51
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36T1:00000002
Body = 
ResponseTime = 20.03.2023 18:00:53
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:54
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36T3:00000002
Body = 
ResponseTime = 20.03.2023 18:00:56
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:57
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:00:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36T5:00000002
Body = 
ResponseTime = 20.03.2023 18:00:59
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:00
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36T7:00000002
Body = 
ResponseTime = 20.03.2023 18:01:02
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:03
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:05
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36T9:00000002
Body = 
ResponseTime = 20.03.2023 18:01:05
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:06
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 18:01:08
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TC:00000002
Body = 
ResponseTime = 20.03.2023 18:01:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TB:00000001
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMyMDg2OCwiZXhwIjoxNjc5MzI0NDY4LCJpYXQiOjE2NzkzMjA4NjgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.ve2Alu90GbnegVhR5OjtRg0HJUJHlTLTJxarVnr1YCQ
ResponseTime = 20.03.2023 18:01:08
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TE:00000002
Body = 
ResponseTime = 20.03.2023 18:01:11
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:12
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TG:00000002
Body = 
ResponseTime = 20.03.2023 18:01:14
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:15
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:17
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TI:00000002
Body = 
ResponseTime = 20.03.2023 18:01:17
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:18
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TK:00000002
Body = 
ResponseTime = 20.03.2023 18:01:20
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:21
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:23
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TM:00000002
Body = 
ResponseTime = 20.03.2023 18:01:23
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:24
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:26
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TO:00000002
Body = 
ResponseTime = 20.03.2023 18:01:26
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:27
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:29
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TQ:00000002
Body = 
ResponseTime = 20.03.2023 18:01:29
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:30
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TS:00000002
Body = 
ResponseTime = 20.03.2023 18:01:32
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:33
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36TU:00000002
Body = 
ResponseTime = 20.03.2023 18:01:35
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:36
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:38
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36U0:00000002
Body = 
ResponseTime = 20.03.2023 18:01:38
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:39
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:41
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36U2:00000002
Body = 
ResponseTime = 20.03.2023 18:01:41
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:42
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:44
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36U4:00000002
Body = 
ResponseTime = 20.03.2023 18:01:44
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:45
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:47
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36U6:00000002
Body = 
ResponseTime = 20.03.2023 18:01:47
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:48
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36U8:00000002
Body = 
ResponseTime = 20.03.2023 18:01:50
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:51
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36UA:00000002
Body = 
ResponseTime = 20.03.2023 18:01:53
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:54
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36UC:00000002
Body = 
ResponseTime = 20.03.2023 18:01:56
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:57
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:01:59
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99DKM36UE:00000002
Body = 
ResponseTime = 20.03.2023 18:01:59
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:02:00
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:02:39
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99F1STSM6:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:02:39
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:02:40
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99F1STSM6:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:02:40.4062747+04:00","endDate":"2023-04-05T02:02:40.4083818+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:02:40.7174962+04:00","endDate":"2023-03-30T21:02:40.7174981+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:02:40.7182403+04:00","endDate":"2023-04-10T18:02:40.7182412+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:02:40.4062747+04:00","endDate":"2023-04-05T02:02:40.4083818+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:02:40.7174962+04:00","endDate":"2023-03-30T21:02:40.7174981+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:02:40.7182403+04:00","endDate":"2023-04-10T18:02:40.7182412+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:02:40.4062747+04:00","endDate":"2023-04-05T02:02:40.4083818+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:02:40.7174962+04:00","endDate":"2023-03-30T21:02:40.7174981+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:02:40.7182403+04:00","endDate":"2023-04-10T18:02:40.7182412+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:02:40.4062747+04:00","endDate":"2023-04-05T02:02:40.4083818+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:02:40.7174962+04:00","endDate":"2023-03-30T21:02:40.7174981+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:02:40.7182403+04:00","endDate":"2023-04-10T18:02:40.7182412+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:02:40.7220234+04:00","endDate":"2023-03-26T03:02:40.7220952+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:02:40.7249732+04:00","endDate":"2023-03-31T00:02:40.7249739+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:02:40.7220234+04:00","endDate":"2023-03-26T03:02:40.7220952+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:02:40.7249732+04:00","endDate":"2023-03-31T00:02:40.7249739+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:02:40.7220234+04:00","endDate":"2023-03-26T03:02:40.7220952+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:02:40.7249732+04:00","endDate":"2023-03-31T00:02:40.7249739+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:02:40.7220234+04:00","endDate":"2023-03-26T03:02:40.7220952+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:02:40.7249732+04:00","endDate":"2023-03-31T00:02:40.7249739+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:02:40
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:02:48
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:04:11
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:46
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET73:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:06:47
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:47
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:47
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET73:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:06:52.4699352+04:00","endDate":"2023-04-05T02:06:52.4700816+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:06:52.5355218+04:00","endDate":"2023-03-30T21:06:52.5355238+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:06:52.5364412+04:00","endDate":"2023-04-10T18:06:52.5364426+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:06:52.4699352+04:00","endDate":"2023-04-05T02:06:52.4700816+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:06:52.5355218+04:00","endDate":"2023-03-30T21:06:52.5355238+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:06:52.5364412+04:00","endDate":"2023-04-10T18:06:52.5364426+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:06:52.4699352+04:00","endDate":"2023-04-05T02:06:52.4700816+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:06:52.5355218+04:00","endDate":"2023-03-30T21:06:52.5355238+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:06:52.5364412+04:00","endDate":"2023-04-10T18:06:52.5364426+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:06:52.4699352+04:00","endDate":"2023-04-05T02:06:52.4700816+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:06:52.5355218+04:00","endDate":"2023-03-30T21:06:52.5355238+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:06:52.5364412+04:00","endDate":"2023-04-10T18:06:52.5364426+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:06:52.5433703+04:00","endDate":"2023-03-26T03:06:52.5435114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:06:52.5482601+04:00","endDate":"2023-03-31T00:06:52.5482616+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:06:52.5433703+04:00","endDate":"2023-03-26T03:06:52.5435114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:06:52.5482601+04:00","endDate":"2023-03-31T00:06:52.5482616+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:06:52.5433703+04:00","endDate":"2023-03-26T03:06:52.5435114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:06:52.5482601+04:00","endDate":"2023-03-31T00:06:52.5482616+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:06:52.5433703+04:00","endDate":"2023-03-26T03:06:52.5435114+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:06:52.5482601+04:00","endDate":"2023-03-31T00:06:52.5482616+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:06:53
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET74:00000002
Body = 
ResponseTime = 20.03.2023 18:06:53
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:54
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET76:00000002
Body = 
ResponseTime = 20.03.2023 18:06:54
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET77:00000002
Body = 
ResponseTime = 20.03.2023 18:06:55
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:06:55
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:00
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET79:00000002
Body = 
ResponseTime = 20.03.2023 18:07:01
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:02
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7A:00000002
Body = 
ResponseTime = 20.03.2023 18:07:02
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:03
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7C:00000002
Body = 
ResponseTime = 20.03.2023 18:07:03
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:04
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:06
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7E:00000002
Body = 
ResponseTime = 20.03.2023 18:07:06
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:07
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7G:00000002
Body = 
ResponseTime = 20.03.2023 18:07:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:10
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7I:00000002
Body = 
ResponseTime = 20.03.2023 18:07:12
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:13
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7K:00000002
Body = 
ResponseTime = 20.03.2023 18:07:15
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:16
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HBFET7M:00000002
Body = 
ResponseTime = 20.03.2023 18:07:18
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:19
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HQAL5NE:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:07:36
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:07:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99HQAL5NE:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:07:37.6871537+04:00","endDate":"2023-04-05T02:07:37.687302+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:07:38.0476797+04:00","endDate":"2023-03-30T21:07:38.0476823+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:07:38.048332+04:00","endDate":"2023-04-10T18:07:38.0483331+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:07:37.6871537+04:00","endDate":"2023-04-05T02:07:37.687302+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:07:38.0476797+04:00","endDate":"2023-03-30T21:07:38.0476823+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:07:38.048332+04:00","endDate":"2023-04-10T18:07:38.0483331+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:07:37.6871537+04:00","endDate":"2023-04-05T02:07:37.687302+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:07:38.0476797+04:00","endDate":"2023-03-30T21:07:38.0476823+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:07:38.048332+04:00","endDate":"2023-04-10T18:07:38.0483331+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:07:37.6871537+04:00","endDate":"2023-04-05T02:07:37.687302+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:07:38.0476797+04:00","endDate":"2023-03-30T21:07:38.0476823+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:07:38.048332+04:00","endDate":"2023-04-10T18:07:38.0483331+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:07:38.0544742+04:00","endDate":"2023-03-26T03:07:38.0545719+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:07:38.0610647+04:00","endDate":"2023-03-31T00:07:38.0610659+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:07:38.0544742+04:00","endDate":"2023-03-26T03:07:38.0545719+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:07:38.0610647+04:00","endDate":"2023-03-31T00:07:38.0610659+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:07:38.0544742+04:00","endDate":"2023-03-26T03:07:38.0545719+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:07:38.0610647+04:00","endDate":"2023-03-31T00:07:38.0610659+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:07:38.0544742+04:00","endDate":"2023-03-26T03:07:38.0545719+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:07:38.0610647+04:00","endDate":"2023-03-31T00:07:38.0610659+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:07:38
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:09:07
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:09:38
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:10:14
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:14:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL0:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:14:55
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:14:56
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL0:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:14:56.9377071+04:00","endDate":"2023-04-05T02:14:56.9379019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:14:57.3543851+04:00","endDate":"2023-03-30T21:14:57.3543869+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:14:57.3548369+04:00","endDate":"2023-04-10T18:14:57.3548374+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:14:56.9377071+04:00","endDate":"2023-04-05T02:14:56.9379019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:14:57.3543851+04:00","endDate":"2023-03-30T21:14:57.3543869+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:14:57.3548369+04:00","endDate":"2023-04-10T18:14:57.3548374+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:14:56.9377071+04:00","endDate":"2023-04-05T02:14:56.9379019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:14:57.3543851+04:00","endDate":"2023-03-30T21:14:57.3543869+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:14:57.3548369+04:00","endDate":"2023-04-10T18:14:57.3548374+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:14:56.9377071+04:00","endDate":"2023-04-05T02:14:56.9379019+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:14:57.3543851+04:00","endDate":"2023-03-30T21:14:57.3543869+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:14:57.3548369+04:00","endDate":"2023-04-10T18:14:57.3548374+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:14:57.3608319+04:00","endDate":"2023-03-26T03:14:57.3609235+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:14:57.3654959+04:00","endDate":"2023-03-31T00:14:57.3654969+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:14:57.3608319+04:00","endDate":"2023-03-26T03:14:57.3609235+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:14:57.3654959+04:00","endDate":"2023-03-31T00:14:57.3654969+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:14:57.3608319+04:00","endDate":"2023-03-26T03:14:57.3609235+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:14:57.3654959+04:00","endDate":"2023-03-31T00:14:57.3654969+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:14:57.3608319+04:00","endDate":"2023-03-26T03:14:57.3609235+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:14:57.3654959+04:00","endDate":"2023-03-31T00:14:57.3654969+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:14:57
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:16:14
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL1:00000001
Body = 
ResponseTime = 20.03.2023 18:17:04
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "iron maiden concert in Tbilisi",
  "description": "iron maidenexclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T18:14:56.9377071+04:00",
  "endDate": "2023-04-05T02:14:56.9379019+04:00"
}
Time = 20.03.2023 18:17:50
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMP99LTBTAL1:00000003
Body = 
ResponseTime = 20.03.2023 18:17:50
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "chkheidze concert in Tbilisi",
  "description": "chkheidze  maidenexclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T18:14:56.9377071+04:00",
  "endDate": "2023-04-05T02:14:56.9379019+04:00"
}
Time = 20.03.2023 18:18:05
Response logged from middleware StatusCode = 401
TraceIdentifier = 0HMP99LTBTAL1:00000005
Body = 
ResponseTime = 20.03.2023 18:18:05
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 18:18:20
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL1:00000007
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMyMTkwMSwiZXhwIjoxNjc5MzI1NTAxLCJpYXQiOjE2NzkzMjE5MDEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.x61S7KCGd79eyEmt-8CumTDfDEDXPV0rP2lxrke0J_0
ResponseTime = 20.03.2023 18:18:21
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "chkheidze concert in Tbilisi",
  "description": "chkheidze  maidenexclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T18:14:56.9377071+04:00",
  "endDate": "2023-04-05T02:14:56.9379019+04:00"
}
Time = 20.03.2023 18:18:49
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL1:00000009
Body = 
ResponseTime = 20.03.2023 18:18:49
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "chkheidzeconcert in Tbilisi",
  "description": "iron maidenexclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T18:14:56.9377071+04:00",
  "endDate": "2023-04-05T02:14:56.9379019+04:00"
}
Time = 20.03.2023 18:18:55
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL1:0000000B
Body = 
ResponseTime = 20.03.2023 18:18:55
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "iron maiden concert in Tbilisi",
  "description": "iron maidenexclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T18:14:56.9377071+04:00",
  "endDate": "2023-04-05T02:14:56.9379019+04:00"
}
Time = 20.03.2023 18:19:02
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL1:0000000D
Body = 
ResponseTime = 20.03.2023 18:19:02
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "kaxeli xvdeba megrels",
  "description": "kaxeli xvdeba megrels",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-04-04T18:14:56.9377071+04:00",
  "endDate": "2023-04-05T02:14:56.9379019+04:00"
}
Time = 20.03.2023 18:19:35
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99LTBTAL1:0000000F
Body = 
ResponseTime = 20.03.2023 18:19:35
 logged from Middleware
IP = 127.0.0.1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:22:37
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:22:37
 logged from Middleware
IP = 127.0.0.1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:22:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:22:37
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01M:00000002
Body = 
ResponseTime = 20.03.2023 18:23:06
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:07
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01O:00000002
Body = 
ResponseTime = 20.03.2023 18:23:08
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:08
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01K:00000002
Body = 
ResponseTime = 20.03.2023 18:23:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01P:00000002
Body = 
ResponseTime = 20.03.2023 18:23:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01Q:00000002
Body = 
ResponseTime = 20.03.2023 18:23:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:23:08.8799006+04:00","endDate":"2023-04-05T02:23:08.8800632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:23:09.2620696+04:00","endDate":"2023-03-30T21:23:09.2620716+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:23:09.2630394+04:00","endDate":"2023-04-10T18:23:09.2630407+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:23:08.8799006+04:00","endDate":"2023-04-05T02:23:08.8800632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:23:09.2620696+04:00","endDate":"2023-03-30T21:23:09.2620716+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:23:09.2630394+04:00","endDate":"2023-04-10T18:23:09.2630407+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:23:08.8799006+04:00","endDate":"2023-04-05T02:23:08.8800632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:23:09.2620696+04:00","endDate":"2023-03-30T21:23:09.2620716+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:23:09.2630394+04:00","endDate":"2023-04-10T18:23:09.2630407+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:23:08.8799006+04:00","endDate":"2023-04-05T02:23:08.8800632+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:23:09.2620696+04:00","endDate":"2023-03-30T21:23:09.2620716+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:23:09.2630394+04:00","endDate":"2023-04-10T18:23:09.2630407+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:23:09.2708915+04:00","endDate":"2023-03-26T03:23:09.2709973+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:23:09.2779091+04:00","endDate":"2023-03-31T00:23:09.2779106+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:23:09.2708915+04:00","endDate":"2023-03-26T03:23:09.2709973+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:23:09.2779091+04:00","endDate":"2023-03-31T00:23:09.2779106+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:23:09.2708915+04:00","endDate":"2023-03-26T03:23:09.2709973+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:23:09.2779091+04:00","endDate":"2023-03-31T00:23:09.2779106+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:23:09.2708915+04:00","endDate":"2023-03-26T03:23:09.2709973+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:23:09.2779091+04:00","endDate":"2023-03-31T00:23:09.2779106+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:23:09
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:12
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01S:00000002
Body = 
ResponseTime = 20.03.2023 18:23:12
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01T:00000002
Body = 
ResponseTime = 20.03.2023 18:23:15
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:15
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01U:00000002
Body = 
ResponseTime = 20.03.2023 18:23:15
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01V:00000002
Body = 
ResponseTime = 20.03.2023 18:23:18
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:18
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD020:00000002
Body = 
ResponseTime = 20.03.2023 18:23:18
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:21
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD021:00000002
Body = 
ResponseTime = 20.03.2023 18:23:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD022:00000002
Body = 
ResponseTime = 20.03.2023 18:23:21
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD023:00000002
Body = 
ResponseTime = 20.03.2023 18:23:24
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:24
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD024:00000002
Body = 
ResponseTime = 20.03.2023 18:23:24
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/DeleteReservedTickets
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD025:00000002
Body = 
ResponseTime = 20.03.2023 18:23:27
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:23:27
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD026:00000002
Body = 
ResponseTime = 20.03.2023 18:23:27
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 18:34:11
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000009
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMyMjg1MiwiZXhwIjoxNjc5MzI2NDUyLCJpYXQiOjE2NzkzMjI4NTIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9._IeRobmXC30kXlhJdszZbCbzNZOwAKLLW0sxLnJOiXM
ResponseTime = 20.03.2023 18:34:12
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Authorization/LogIn
IsSecured = True
QueryString = 
RequestBody = {
  "email": "Ako@g.com",
  "password": "Akaki!1"
}
Time = 20.03.2023 18:35:04
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:0000000B
Body = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IkFrb0BnLmNvbSIsIlVzZXJJZCI6ImQ2MTg3NjIxLWU4MWQtNGI1OS1iYTQzLTUzOGJlMzE1OWMxZiIsIm5iZiI6MTY3OTMyMjkwNCwiZXhwIjoxNjc5MzI2NTA0LCJpYXQiOjE2NzkzMjI5MDQsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.U_HCViKiDsehn6fk6krOSHrup9gTq9RYI0vUTzPFf-8
ResponseTime = 20.03.2023 18:35:04
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Metallicaaaaaaaaaaaaaaaaaaa concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-02-04T18:23:08.8799006+04:00",
  "endDate": "2023-02-05T02:23:08.8800632+04:00"
}
Time = 20.03.2023 18:37:21
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:0000000D
Body = 
ResponseTime = 20.03.2023 18:37:21
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Maidennnnnnnnnnnnnnnnnnn concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-02-04T18:23:08.8799006+04:00",
  "endDate": "2023-02-05T02:23:08.8800632+04:00"
}
Time = 20.03.2023 18:37:32
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:0000000F
Body = 
ResponseTime = 20.03.2023 18:37:32
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Events/CreateEvent
IsSecured = True
QueryString = 
RequestBody = {
  "title": "Ironnnnnnnnnnnnnn concert in Tbilisi",
  "description": "Metallica exclusively visited georgia to perform in city of Tbilisi",
  "price": 120,
  "ticketCount": 1000,
  "startDate": "2023-02-04T18:23:08.8799006+04:00",
  "endDate": "2023-02-05T02:23:08.8800632+04:00"
}
Time = 20.03.2023 18:37:43
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000011
Body = 
ResponseTime = 20.03.2023 18:37:43
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=3
RequestBody = 
Time = 20.03.2023 18:45:45
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000013
Body = 
ResponseTime = 20.03.2023 18:45:45
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=3
RequestBody = 
Time = 20.03.2023 18:45:50
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000015
Body = 
ResponseTime = 20.03.2023 18:45:50
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=3
RequestBody = 
Time = 20.03.2023 18:45:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000017
Body = 
ResponseTime = 20.03.2023 18:45:52
 logged from Middleware
IP = ::1
Address = https
Method = POST
Path = /v1/Ticket/BookTicket
IsSecured = True
QueryString = ?eventId=3
RequestBody = 
Time = 20.03.2023 18:45:52
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP99Q6OD01N:00000019
Body = 
ResponseTime = 20.03.2023 18:45:52
 logged from Middleware
IP = 127.0.0.1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:07
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:09
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUF:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 20.03.2023 18:59:09
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUD:00000002
Body = 
ResponseTime = 20.03.2023 18:59:12
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUG:00000002
Body = 
ResponseTime = 20.03.2023 18:59:12
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUF:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:59:12.5224397+04:00","endDate":"2023-04-05T02:59:12.5225719+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:59:12.9174629+04:00","endDate":"2023-03-30T21:59:12.917465+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:59:12.9182825+04:00","endDate":"2023-04-10T18:59:12.9182836+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:59:12.5224397+04:00","endDate":"2023-04-05T02:59:12.5225719+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:59:12.9174629+04:00","endDate":"2023-03-30T21:59:12.917465+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:59:12.9182825+04:00","endDate":"2023-04-10T18:59:12.9182836+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:59:12.5224397+04:00","endDate":"2023-04-05T02:59:12.5225719+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:59:12.9174629+04:00","endDate":"2023-03-30T21:59:12.917465+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:59:12.9182825+04:00","endDate":"2023-04-10T18:59:12.9182836+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-04T18:59:12.5224397+04:00","endDate":"2023-04-05T02:59:12.5225719+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-30T18:59:12.9174629+04:00","endDate":"2023-03-30T21:59:12.917465+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-09T18:59:12.9182825+04:00","endDate":"2023-04-10T18:59:12.9182836+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:59:12.9252709+04:00","endDate":"2023-03-26T03:59:12.9253832+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:59:12.9315558+04:00","endDate":"2023-03-31T00:59:12.9315569+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:59:12.9252709+04:00","endDate":"2023-03-26T03:59:12.9253832+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:59:12.9315558+04:00","endDate":"2023-03-31T00:59:12.9315569+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:59:12.9252709+04:00","endDate":"2023-03-26T03:59:12.9253832+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:59:12.9315558+04:00","endDate":"2023-03-31T00:59:12.9315569+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-25T18:59:12.9252709+04:00","endDate":"2023-03-26T03:59:12.9253832+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-29T18:59:12.9315558+04:00","endDate":"2023-03-31T00:59:12.9315569+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 20.03.2023 18:59:13
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:13
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUH:00000002
Body = 
ResponseTime = 20.03.2023 18:59:13
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:16
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUI:00000002
Body = 
ResponseTime = 20.03.2023 18:59:16
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:19
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUJ:00000002
Body = 
ResponseTime = 20.03.2023 18:59:19
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:22
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUK:00000002
Body = 
ResponseTime = 20.03.2023 18:59:22
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:25
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUL:00000002
Body = 
ResponseTime = 20.03.2023 18:59:25
 logged from Middleware
IP = ::1
Address = https
Method = DELETE
Path = /v1/EventWorker/ArchiveEvents
IsSecured = True
QueryString = 
RequestBody = 
Time = 20.03.2023 18:59:28
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9AEJSQIUM:00000002
Body = 
ResponseTime = 20.03.2023 18:59:28
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/index.html
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.03.2023 12:39:30
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9SV4IT7HQ:00000001
Body = <!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *,
        *:before,
        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    
</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x, y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33, 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{'),
                fn_body = str.substring(fn_body_idx + 1, str.lastIndexOf('}')),
                fn_declare = str.substring(0, fn_body_idx),
                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1, fn_declare.lastIndexOf(')')),
                args = fn_params.split(',');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this, args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json","name":"Events.ItAcademy.API v1"}],"deepLinking":false,"persistAuthorization":false,"displayOperationId":false,"defaultModelsExpandDepth":1,"defaultModelExpandDepth":1,"defaultModelRendering":"example","displayRequestDuration":false,"docExpansion":"list","showExtensions":false,"showCommonExtensions":false,"supportedSubmitMethods":["get","put","post","delete","options","head","patch","trace"],"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" ","scopes":[],"useBasicAuthenticationWithAccessCodeGrant":false,"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html", item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided, disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified, use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html", window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null,"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>

ResponseTime = 21.03.2023 12:39:30
 logged from Middleware
IP = ::1
Address = https
Method = GET
Path = /swagger/v1/swagger.json
IsSecured = True
QueryString = 
RequestBody = 
Time = 21.03.2023 12:39:31
Response logged from middleware StatusCode = 200
TraceIdentifier = 0HMP9SV4IT7HQ:00000007
Body = {
  "openapi": "3.0.1",
  "info": {
    "title": "EventApi",
    "description": "EventApi",
    "contact": {
      "name": "Event Api",
      "email": "akaki.ujarashvili@gmail.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events": {
      "get": {
        "tags": [
          "Events"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventWithId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/GetCurrentUserEventsWithUserId/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/Events/CreateEvent": {
      "post": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-05T12:39:31.680558+04:00","endDate":"2023-04-05T20:39:31.6806921+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-31T12:39:32.2037823+04:00","endDate":"2023-03-31T15:39:32.2037846+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-10T12:39:32.2047754+04:00","endDate":"2023-04-11T12:39:32.2047767+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-05T12:39:31.680558+04:00","endDate":"2023-04-05T20:39:31.6806921+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-31T12:39:32.2037823+04:00","endDate":"2023-03-31T15:39:32.2037846+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-10T12:39:32.2047754+04:00","endDate":"2023-04-11T12:39:32.2047767+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-05T12:39:31.680558+04:00","endDate":"2023-04-05T20:39:31.6806921+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-31T12:39:32.2037823+04:00","endDate":"2023-03-31T15:39:32.2037846+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-10T12:39:32.2047754+04:00","endDate":"2023-04-11T12:39:32.2047767+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestModel"
              },
              "examples": {
                "example 1": {
                  "value": {"title":"Metallica concert in Tbilisi","description":"Metallica exclusively visited georgia to perform in city of Tbilisi","price":120,"ticketCount":1000,"startDate":"2023-04-05T12:39:31.680558+04:00","endDate":"2023-04-05T20:39:31.6806921+04:00"}
                },
                "example 2": {
                  "value": {"title":"Gore verbinski in Tbilisi","description":"Famous movie director is in georgia to spread his knowledge about filmmaking","price":50,"ticketCount":200,"startDate":"2023-03-31T12:39:32.2037823+04:00","endDate":"2023-03-31T15:39:32.2037846+04:00"}
                },
                "example 3": {
                  "value": {"title":"Fashion week","description":"Famous models came into georgia to participate in fashion week","price":200,"ticketCount":100,"startDate":"2023-04-10T12:39:32.2047754+04:00","endDate":"2023-04-11T12:39:32.2047767+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/UpdateEvent": {
      "put": {
        "tags": [
          "Events"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-26T12:39:32.2121024+04:00","endDate":"2023-03-26T21:39:32.2122358+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-30T12:39:32.2173969+04:00","endDate":"2023-03-31T18:39:32.2173979+04:00"}
                }
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-26T12:39:32.2121024+04:00","endDate":"2023-03-26T21:39:32.2122358+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-30T12:39:32.2173969+04:00","endDate":"2023-03-31T18:39:32.2173979+04:00"}
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-26T12:39:32.2121024+04:00","endDate":"2023-03-26T21:39:32.2122358+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-30T12:39:32.2173969+04:00","endDate":"2023-03-31T18:39:32.2173979+04:00"}
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.ItAcademy.Application.Events.Requests.EventRequestPutModel"
              },
              "examples": {
                "example 1": {
                  "value": {"id":0,"title":"Screening of old western movies","description":"For old movie enthusiasts we will be showing movies like the good bad and the ugly","price":20,"ticketCount":200,"startDate":"2023-03-26T12:39:32.2121024+04:00","endDate":"2023-03-26T21:39:32.2122358+04:00"}
                },
                "example 2": {
                  "value": {"id":0,"title":"Car auction","description":"For car enthusiasts we will have auction of old cars. brands will include mercedes, bmw...","price":25,"ticketCount":400,"startDate":"2023-03-30T12:39:32.2173969+04:00","endDate":"2023-03-31T18:39:32.2173979+04:00"}
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Events/{id}": {
      "patch": {
        "tags": [
          "Events"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.Operation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/DeleteReservedTickets": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/EventWorker/ArchiveEvents": {
      "delete": {
        "tags": [
          "EventWorker"
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BookTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicket": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/BuyTicketStraight": {
      "post": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/Ticket/DeleteReserved": {
      "delete": {
        "tags": [
          "Ticket"
        ],
        "parameters": [
          {
            "name": "ticketId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Events.ItAcademy.Application.Events.Requests.EventRequestModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Requests.EventRequestPutModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Events.Responses.EventResponseModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "integer",
            "format": "int32"
          },
          "ticketCount": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserCreateRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Events.ItAcademy.Application.Users.Requests.UserLoginRequestModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.Operation": {
        "type": "object",
        "properties": {
          "operationType": {
            "$ref": "#/components/schemas/Microsoft.AspNetCore.JsonPatch.Operations.OperationType"
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.JsonPatch.Operations.OperationType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "description": "Basic Authorization header using the Bearer scheme.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "basic": [ ]
    }
  ]
}
ResponseTime = 21.03.2023 12:39:32
